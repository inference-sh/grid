{
  "input": {
    "$defs": {
      "ContextMessage": {
        "properties": {
          "role": {
            "$ref": "#/$defs/ContextMessageRole",
            "description": "The role of the message"
          },
          "text": {
            "description": "The text content of the message",
            "title": "Text",
            "type": "string"
          },
          "image": {
            "anyOf": [
              {
                "$ref": "#/$defs/File"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "The image url of the message"
          }
        },
        "required": [
          "role",
          "text"
        ],
        "title": "ContextMessage",
        "type": "object"
      },
      "ContextMessageRole": {
        "enum": [
          "user",
          "assistant",
          "system"
        ],
        "title": "ContextMessageRole",
        "type": "string"
      },
      "File": {
        "description": "A class representing a file in the inference.sh ecosystem.",
        "properties": {
          "uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Uri"
          },
          "path": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Path"
          },
          "content_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Content Type"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Size"
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Filename"
          }
        },
        "title": "File",
        "type": "object"
      }
    },
    "properties": {
      "system_prompt": {
        "default": "You are Devstral, a helpful agentic model trained by Mistral AI and using the OpenHands scaffold. You can interact with a computer to solve tasks.\n\n<ROLE>\nYour primary role is to assist users by executing commands, modifying code, and solving technical problems effectively. You should be thorough, methodical, and prioritize quality over speed.\n* If the user asks a question, like \"why is X happening\", don't try to fix the problem. Just give an answer to the question.\n</ROLE>\n\n<EFFICIENCY>\n* Each action you take is somewhat expensive. Wherever possible, combine multiple actions into a single action, e.g. combine multiple bash commands into one, using sed and grep to edit/view multiple files at once.\n* When exploring the codebase, use efficient tools like find, grep, and git commands with appropriate filters to minimize unnecessary operations.\n</EFFICIENCY>\n\n<FILE_SYSTEM_GUIDELINES>\n* When a user provides a file path, do NOT assume it's relative to the current working directory. First explore the file system to locate the file before working on it.\n* If asked to edit a file, edit the file directly, rather than creating a new file with a different filename.\n* For global search-and-replace operations, consider using `sed` instead of opening file editors multiple times.\n</FILE_SYSTEM_GUIDELINES>\n\n<CODE_QUALITY>\n* Write clean, efficient code with minimal comments. Avoid redundancy in comments: Do not repeat information that can be easily inferred from the code itself.\n* When implementing solutions, focus on making the minimal changes needed to solve the problem.\n* Before implementing any changes, first thoroughly understand the codebase through exploration.\n* If you are adding a lot of code to a function or file, consider splitting the function or file into smaller pieces when appropriate.\n</CODE_QUALITY>\n\n<VERSION_CONTROL>\n* When configuring git credentials, use \"openhands\" as the user.name and \"openhands@all-hands.dev\" as the user.email by default, unless explicitly instructed otherwise.\n* Exercise caution with git operations. Do NOT make potentially dangerous changes (e.g., pushing to main, deleting repositories) unless explicitly asked to do so.\n* When committing changes, use `git status` to see all modified files, and stage all files necessary for the commit. Use `git commit -a` whenever possible.\n* Do NOT commit files that typically shouldn't go into version control (e.g., node_modules/, .env files, build directories, cache files, large binaries) unless explicitly instructed by the user.\n* If unsure about committing certain files, check for the presence of .gitignore files or ask the user for clarification.\n</VERSION_CONTROL>\n\n<PULL_REQUESTS>\n* When creating pull requests, create only ONE per session/issue unless explicitly instructed otherwise.\n* When working with an existing PR, update it with new commits rather than creating additional PRs for the same issue.\n* When updating a PR, preserve the original PR title and purpose, updating description only when necessary.\n</PULL_REQUESTS>\n\n<PROBLEM_SOLVING_WORKFLOW>\n1. EXPLORATION: Thoroughly explore relevant files and understand the context before proposing solutions\n2. ANALYSIS: Consider multiple approaches and select the most promising one\n3. TESTING:\n   * For bug fixes: Create tests to verify issues before implementing fixes\n   * For new features: Consider test-driven development when appropriate\n   * If the repository lacks testing infrastructure and implementing tests would require extensive setup, consult with the user before investing time in building testing infrastructure\n   * If the environment is not set up to run tests, consult with the user first before investing time to install all dependencies\n4. IMPLEMENTATION: Make focused, minimal changes to address the problem\n5. VERIFICATION: If the environment is set up to run tests, test your implementation thoroughly, including edge cases. If the environment is not set up to run tests, consult with the user first before investing time to run tests.\n</PROBLEM_SOLVING_WORKFLOW>\n\n<SECURITY>\n* Only use GITHUB_TOKEN and other credentials in ways the user has explicitly requested and would expect.\n* Use APIs to work with GitHub or other platforms, unless the user asks otherwise or your task requires browsing.\n</SECURITY>\n\n<ENVIRONMENT_SETUP>\n* When user asks you to run an application, don't stop if the application is not installed. Instead, please install the application and run the command again.\n* If you encounter missing dependencies:\n  1. First, look around in the repository for existing dependency files (requirements.txt, pyproject.toml, package.json, Gemfile, etc.)\n  2. If dependency files exist, use them to install all dependencies at once (e.g., `pip install -r requirements.txt`, `npm install`, etc.)\n  3. Only install individual packages directly if no dependency files are found or if only specific packages are needed\n* Similarly, if you encounter missing dependencies for essential tools requested by the user, install them when possible.\n</ENVIRONMENT_SETUP>\n\n<TROUBLESHOOTING>\n* If you've made repeated attempts to solve a problem but tests still fail or the user reports it's still broken:\n  1. Step back and reflect on 5-7 different possible sources of the problem\n  2. Assess the likelihood of each possible cause\n  3. Methodically address the most likely causes, starting with the highest probability\n  4. Document your reasoning process\n* When you run into any major issue while executing a plan from the user, please don't try to directly work around it. Instead, propose a new plan and confirm with the user before proceeding.\n</TROUBLESHOOTING>",
        "description": "The system prompt to use for the model",
        "examples": [],
        "title": "System Prompt",
        "type": "string"
      },
      "context": {
        "default": [],
        "description": "The context to use for the model",
        "examples": [
          [
            {
              "content": [
                {
                  "text": "What is the capital of France?",
                  "type": "text"
                }
              ],
              "role": "user"
            },
            {
              "content": [
                {
                  "text": "The capital of France is Paris.",
                  "type": "text"
                }
              ],
              "role": "assistant"
            }
          ],
          [
            {
              "content": [
                {
                  "text": "What is the weather like today?",
                  "type": "text"
                }
              ],
              "role": "user"
            },
            {
              "content": [
                {
                  "text": "I apologize, but I don't have access to real-time weather information. You would need to check a weather service or app to get current weather conditions for your location.",
                  "type": "text"
                }
              ],
              "role": "assistant"
            }
          ],
          [
            {
              "content": [
                {
                  "text": "Can you help me write a poem about spring?",
                  "type": "text"
                }
              ],
              "role": "user"
            },
            {
              "content": [
                {
                  "text": "Here's a short poem about spring:\n\nGreen buds awakening,\nSoft rain gently falling down,\nNew life springs anew.\n\nWarm sun breaks through clouds,\nBirds return with joyful song,\nNature's sweet rebirth.",
                  "type": "text"
                }
              ],
              "role": "assistant"
            }
          ],
          [
            {
              "content": [
                {
                  "text": "Explain quantum computing in simple terms",
                  "type": "text"
                }
              ],
              "role": "user"
            },
            {
              "content": [
                {
                  "text": "Quantum computing is like having a super-powerful calculator that can solve many problems at once instead of one at a time. While regular computers use bits (0s and 1s), quantum computers use quantum bits or \"qubits\" that can be both 0 and 1 at the same time - kind of like being in two places at once! This allows them to process huge amounts of information much faster than regular computers for certain types of problems.",
                  "type": "text"
                }
              ],
              "role": "assistant"
            }
          ]
        ],
        "items": {
          "$ref": "#/$defs/ContextMessage"
        },
        "title": "Context",
        "type": "array"
      },
      "temperature": {
        "default": 0.7,
        "description": "The temperature to use for the model",
        "title": "Temperature",
        "type": "number"
      },
      "top_p": {
        "default": 0.95,
        "description": "The top-p to use for the model",
        "title": "Top P",
        "type": "number"
      },
      "max_tokens": {
        "default": 40960,
        "description": "The maximum number of tokens to generate",
        "title": "Max Tokens",
        "type": "integer"
      },
      "context_size": {
        "default": 4096,
        "description": "The maximum number of tokens to use for the context (changing this will cause a model re-setup)",
        "max_value": 49152,
        "min_value": 4096,
        "title": "Context Size",
        "type": "integer"
      },
      "text": {
        "description": "The user prompt to use for the model",
        "examples": [
          "What is the capital of France?",
          "What is the weather like today?",
          "Can you help me write a poem about spring?",
          "Explain quantum computing in simple terms"
        ],
        "title": "Text",
        "type": "string"
      },
      "image": {
        "anyOf": [
          {
            "$ref": "#/$defs/File"
          },
          {
            "type": "null"
          }
        ],
        "default": null,
        "description": "The image to use for the model"
      },
      "reasoning": {
        "default": false,
        "title": "Reasoning",
        "type": "boolean"
      },
      "tools": {
        "default": [],
        "items": {
          "additionalProperties": true,
          "type": "object"
        },
        "title": "Tools",
        "type": "array"
      }
    },
    "required": [
      "text"
    ],
    "title": "AppInput",
    "type": "object"
  },
  "output": {
    "$defs": {
      "LLMUsage": {
        "properties": {
          "stop_reason": {
            "default": "",
            "title": "Stop Reason",
            "type": "string"
          },
          "time_to_first_token": {
            "default": 0.0,
            "title": "Time To First Token",
            "type": "number"
          },
          "tokens_per_second": {
            "default": 0.0,
            "title": "Tokens Per Second",
            "type": "number"
          },
          "prompt_tokens": {
            "default": 0,
            "title": "Prompt Tokens",
            "type": "integer"
          },
          "completion_tokens": {
            "default": 0,
            "title": "Completion Tokens",
            "type": "integer"
          },
          "total_tokens": {
            "default": 0,
            "title": "Total Tokens",
            "type": "integer"
          },
          "reasoning_tokens": {
            "default": 0,
            "title": "Reasoning Tokens",
            "type": "integer"
          },
          "reasoning_time": {
            "default": 0.0,
            "title": "Reasoning Time",
            "type": "number"
          }
        },
        "title": "LLMUsage",
        "type": "object"
      }
    },
    "properties": {
      "response": {
        "title": "Response",
        "type": "string"
      },
      "reasoning": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "null"
          }
        ],
        "default": null,
        "title": "Reasoning"
      },
      "tool_calls": {
        "anyOf": [
          {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array"
          },
          {
            "type": "null"
          }
        ],
        "default": null,
        "title": "Tool Calls"
      },
      "usage": {
        "anyOf": [
          {
            "$ref": "#/$defs/LLMUsage"
          },
          {
            "type": "null"
          }
        ],
        "default": null
      }
    },
    "required": [
      "response"
    ],
    "title": "AppOutput",
    "type": "object"
  }
}